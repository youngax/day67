<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--1.开启spring的注解配置，扫描包-->
    <context:component-scan base-package="com.ysl.demo.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--2.配置读取数据库四大件的db.properties-->
    <!--
        classpath: 表示获取根路径下的文件
        classpath*：表示根路径下有文件夹的情况
    -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:druid.properties"/>
    </bean>
    <!--3.配置数据源，我们使用spring框架去管理-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--配置链接数据库的四大件-->
        <!--设置驱动类的类型-->
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
    </bean>
    <!--4.把sqlsession的创建交给spring管理-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--配置实体类的别名-->
        <property name="typeAliasesPackage" value="com.ysl.demo.entity"/>
        <!--配置加载mapper映射文件-->
        <property name="mapperLocations" value="classpath*:Mapper/*.xml"/>
    </bean>
    <!--5.让spring能够找到dao下面的接口，动态代理实例化mapper接口的实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--配置扫描dao下面的接口-->
        <property name="basePackage" value="com.ysl.demo.dao"/>
    </bean>
    <!--6.配置事务管理器-->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--7.配置事务的传播行为-->
    <!--xml版配置实现spring的声明式事务管理-->
    <tx:advice transaction-manager="tx" id="advice">
        <!--对哪些方法进行事务管理：配置事务的传播行为-->
        <!--增  删  改  /  查 -->
        <!--add*:  凡是以add开头的方法，都进行事务管理-->
        <!--针对业务层的配置-->
        <!--
           添加数据： addUser(User user);
                     insertUser(User user);
        -->
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!--8.配置事务管理的切入点-->
    <aop:config proxy-target-class="true">
        <!--把业务层的类的方法，作为切入点-->
        <aop:advisor advice-ref="advice" pointcut="execution(* com.ysl.demo.service.*.*(..))"/>
    </aop:config>
</beans>